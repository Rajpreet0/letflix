// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Model 
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId // the way how MongoDB specifies Id's
  name           String
  image          String? // Optional
  // Why optional: Because Social Provider Login like Google, Github... won't need those Fields
  email          String?   @unique // @unique specifies the that the Email will be Unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime  @default(now()) // @default specifies the default value, which is the current Time
  updatedAt      DateTime  @updatedAt // The updatedAt Function which updates the Time, everytime something changed in User Model
  favoriteIds    String[]  @db.ObjectId // List of all favorite Movies, which is a List of Id's
  sessions       Session[]
  accounts       Account[]
}

// This Model is used when SignUp with Google or Github Accounts
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId // Relation between Account and User (Reference)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  // We are connection the Account Model with the User Model using the File: userId which references the id of the Model User
  // onDelete specifies what happens when teh User is deleted 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Unique constraint on provider and providerAccountId
  @@unique([provider, providerAccountId])
}

// Session model definition
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique // Unique session token
  userId       String   @db.ObjectId // Reference to associated user
  expires      DateTime

  // Relation to associated user
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerifcationToken model definition
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  // Unique constraint on identifierand token
  @@unique([identifier, token])
}

// Movie model definition
model Movie {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  videoUrl     String
  thumbnailUrl String
  genre        String
  duration     String
}
